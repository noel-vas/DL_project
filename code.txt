# Use "pip install scikit-learn" in command line to install scikit learn library prior to running the following code

import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load the Iris dataset
iris = load_iris()
X, y = iris.data, iris.target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Function to compute tangent vectors for a given point
def compute_tangent_vector(x, X, epsilon=1e-5):
    # Use finite differences to approximate tangent vector
    tangent_vector = []
    for i in range(X.shape[1]):
        x_plus_eps = np.copy(x)
        x_plus_eps[i] += epsilon
        tangent_vector.append((model.predict([x_plus_eps]) - model.predict([x])) / epsilon)
    return np.concatenate(tangent_vector)

# Fit a k-nearest neighbors classifier
model = KNeighborsClassifier(n_neighbors=3)
model.fit(X_train, y_train)

# Predictions on the test set
y_pred = model.predict(X_test)

# Compute accuracy without using tangent distance
accuracy_without_tangent = accuracy_score(y_test, y_pred)
print(f"Accuracy without Tangent Distance: {accuracy_without_tangent:.2f}")

# Compute tangent vectors and distances
tangent_distances = []
for i in range(len(X_test)):
    x = X_test[i]
    tangent_vector = compute_tangent_vector(x, X_train)
    tangent_distances.append(np.linalg.norm(tangent_vector))

# Combine the original distances with tangent distances
combined_distances = np.array(tangent_distances) + model.decision_function(X_test)

# Use the combined distances for predictions
y_pred_with_tangent = np.argmin(combined_distances, axis=1)

# Compute accuracy using tangent distance
accuracy_with_tangent = accuracy_score(y_test, y_pred_with_tangent)
print(f"Accuracy with Tangent Distance: {accuracy_with_tangent:.2f}")
